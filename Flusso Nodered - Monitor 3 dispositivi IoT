[{"id":"c9f3fbc5.34b07","type":"ibmiot in","z":"2330cd8.d56d9b2","authentication":"quickstart","apiKey":"","inputType":"evt","deviceId":"4ce3690155db","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"Device_1","service":"quickstart","allDevices":false,"allApplications":false,"allDeviceTypes":true,"allEvents":true,"allCommands":false,"allFormats":false,"x":120,"y":60,"wires":[["5a17e637.ece7d"]]},{"id":"994470cc.100958","type":"ibmiot in","z":"2330cd8.d56d9b2","authentication":"quickstart","apiKey":"","inputType":"evt","deviceId":"aff07b1324a4","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"Device_2","service":"quickstart","allDevices":false,"allApplications":false,"allDeviceTypes":true,"allEvents":true,"allCommands":false,"allFormats":false,"x":120,"y":180,"wires":[["d34e0b3.bd09ff8"]]},{"id":"e2f6cf33.256f1","type":"cloudant out","z":"2330cd8.d56d9b2","name":"db","cloudant":"","database":"deviceinput","service":"myIoTexperiments-cloudantNoSQLDB","payonly":false,"operation":"insert","x":550,"y":140,"wires":[]},{"id":"5a17e637.ece7d","type":"function","z":"2330cd8.d56d9b2","name":"format input","func":"var time = new Date();\nvar hour = time.getUTCHours();\nvar minute = time.getUTCMinutes();\nvar second = time.getUTCSeconds();\n\n// Create MQTT message in JSON\nmsg = {\n  payload: \n    {\n      d:{\n        \"temp\" : msg.payload.d.temp,\n        \"deviceId\" : msg.payload.d.name,\n        \"deviceName\" : \"Device_1\",\n        \"time\" : hour*60*60+minute*60+second\n      }\n    }\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":60,"wires":[["e2f6cf33.256f1"]]},{"id":"d34e0b3.bd09ff8","type":"function","z":"2330cd8.d56d9b2","name":"format input","func":"var time = new Date();\nvar hour = time.getUTCHours();\nvar minute = time.getUTCMinutes();\nvar second = time.getUTCSeconds();\n\n// Create MQTT message in JSON\nmsg = {\n  payload: \n    {\n      d:{\n        \"temp\" : msg.payload.d.temp,\n        \"deviceId\" : msg.payload.d.name,\n        \"deviceName\" : \"Device_2\",\n        \"time\" : hour*60*60+minute*60+second\n      }\n    }\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":180,"wires":[["e2f6cf33.256f1"]]},{"id":"20867235.f49536","type":"cloudant in","z":"2330cd8.d56d9b2","name":"","cloudant":"","database":"deviceinput","service":"myIoTexperiments-cloudantNoSQLDB","search":"_all_","design":"","index":"","x":310,"y":300,"wires":[["b93d0e3d.ebabd8"]]},{"id":"28b48957.bec6b6","type":"http in","z":"2330cd8.d56d9b2","name":"","url":"/getdata","method":"get","upload":false,"swaggerDoc":"","x":110,"y":300,"wires":[["20867235.f49536"]]},{"id":"b93d0e3d.ebabd8","type":"http response","z":"2330cd8.d56d9b2","name":"","statusCode":"","headers":{},"x":690,"y":320,"wires":[]},{"id":"f443a3cf.976d78","type":"template","z":"2330cd8.d56d9b2","name":"Auto Update Script","field":"","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n<script src=\"https://d3js.org/d3.v3.min.js\"></script>\n<script src=\"https://d3js.org/d3-color.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-interpolate.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-scale-chromatic.v1.min.js\"></script>\n\n<style type=\"text/css\">\nbody {background-color: #ccc;}\nsvg {background-color: white;}\n\t\t\t.axis path,\n\t\t\t.axis line {\n\t\t\t\tfill: none;\n\t\t\t\tstroke: black;\n\t\t\t\tshape-rendering: crispEdges;\n\t\t\t}\n\n\t\t\t.axis text {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tfont-size: 11px;\n\t\t\t}\n</style>\n\n<body>\n    <button type=button onclick=\"resetDB()\">RESET DB</button>\n<div>\n<p>Number of device 1 inputs:<span id=\"sizeinput1\"></span></p>\n<p>Number of device 2 inputs:<span id=\"sizeinput2\"></span></p>\n</div>\n<svg id=\"canvas\" width=\"700\" height=\"350\"></svg>\n</body>\n\n<script type=\"text/javascript\">\n\n//Refresh data milliseconds\nvar dataRefresh = 2000;\n\t\t\n// Call getdata every 2s and save result in getDB in JSON format (main function of web call)\nsetInterval(function(){\n\n     // In this variable we will put the JSON output of the getdata request from the cloudant DB\n    var getDB = [];\n    var req = httpRequest(\"https://myiotexperiments.eu-gb.mybluemix.net/getdata\", \"GET\");  // In this example you don't want to GET the full page contents\n  //  alert(req.status == 200 ? \"found!\" : \"failed\");  // We didn't provided an async proc so this will be executed after request completion only \n    getDB = JSON.parse(req.responseText);\n\n    //Vector where collect device inputs (each element of this vector represent a device)\n    var deviceData = []\n    deviceData = ETLdevice(getDB);\nconsole.log(deviceData)\n    // Update input details\n    if(deviceData.length>0){\n    $(\"#sizeinput1\").html(deviceData[0].time.length);\n    $(\"#sizeinput2\").html(deviceData[1].time.length);\n}\n    drawGraph(deviceData);\n\n },dataRefresh);\n\nfunction httpRequest(address, reqType) {\n   var r = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(\"Microsoft.XMLHTTP\");\n   r.open(reqType, address,false);\n   r.send();\n   return r;\n}\n\n//From raw data to device drive data (return a vector of device data)\nfunction ETLdevice(getDB){\n\n    var deviceInput = [];\n     //Format data from the device point of view\n    for(var i=0;i<getDB.length;i++)\n    {\n        //is the first time that you find this device?\n        if(!finddeviceName(deviceInput,getDB[i].payload.d.deviceName))\n        {\n            var temp1 = [];\n            var temp2 = [];\n            temp1.push(getDB[i].payload.d.time);\n            temp2.push(getDB[i].payload.d.temp);\n            deviceInput.push({deviceName:getDB[i].payload.d.deviceName,time:temp1, temp:temp2});\n        }\n        else{\n            deviceInput[indexdeviceName(deviceInput,getDB[i].payload.d.deviceName)].time.push(getDB[i].payload.d.time);\n            deviceInput[indexdeviceName(deviceInput,getDB[i].payload.d.deviceName)].temp.push(getDB[i].payload.d.temp);\n            }\n    }\n\nvar deviceInputSorted = [];\n    // Sort all parameters by timestamp\n    for(var i=0;i<deviceInput.length;i++){\n\n    //prepare data to be sorted\n    var data = [];\n    for(var k=0;k<deviceInput[i].time.length;k++)\n        data.push({time: deviceInput[i].time[k],temp:deviceInput[i].temp[k]});\n    \n    //Sort data by time\n    data.sort(function(a, b) {return a.time - b.time;});\n\n    // update data in deviceInput\n    deviceInputSorted.push({deviceName:deviceInput[i].deviceName,time:[], temp:[]});\n    for(var k=0;k<deviceInput[i].time.length;k++)\n        {\n            deviceInputSorted[i].time.push(data[k].time);\n            deviceInputSorted[i].temp.push(data[k].temp);\n        }\n    }\n    \n    return deviceInputSorted;\n}\n\n//Draw graphs\nfunction drawGraph(deviceInput){\n    \n    //Width and height\n    var w = 700;\n    var h = 350;\n    var padding = 40;\n\n     // Start draw graphs\n    d3.selectAll(\"svg\").remove();\n    \n    //Create SVG element\n\tvar svg = d3.select(\"body\")\n\t\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"id\",\"canvas\")\n\t\t\t\t.attr(\"width\", w)\n\t\t\t\t.attr(\"height\", h);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log(minmaxtime(deviceInput));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(minmaxtemp(deviceInput));\n    var xScale = d3.scale.linear()\n                    .domain(minmaxtime(deviceInput))\n\t\t\t        .range([padding, w-padding]);\n\t\t\t\n    var yScale = d3.scale.linear()\n\t\t            .domain(minmaxtemp(deviceInput))\n\t\t\t        .range([h - padding, padding]);\n\n    //Define X axis\n    var xAxis = d3.svg.axis()\n            \t\t.scale(xScale)\n\t\t    \t\t.orient(\"bottom\")\n\t\t\t    \t.ticks(5);\n\n    //Define Y axis\n    var yAxis = d3.svg.axis()\n\t\t    \t\t.scale(yScale)\n\t    \t\t\t.orient(\"left\")\n\t\t\t    \t.ticks(5);\n\n    //Create X axis\n\tsvg.append(\"g\")\n\t    .attr(\"class\", \"x axis\")\n\t    .attr(\"transform\", \"translate(0,\" + (h - padding +5)  + \")\")\n\t    .call(xAxis);\n\n    //Create Y axis\n\tsvg.append(\"g\")\n\t    .attr(\"class\", \"y axis\")\n\t    .attr(\"transform\", \"translate(\" + (padding-5) + \",0)\")\n\t    .call(yAxis);\n\n    var lineFunction = d3.svg.line()\n\t                        .x(function(d) { return xScale(d.time); })\n\t                        .y(function(d) { return yScale(d.temp); })\n                            .interpolate(\"linear\");\n\n    var color = d3.scale.category10();\n  \nfor(var i=0;i<deviceInput.length;i++)\n{\n    var dataToBePlotted = [];\n    \n    for(var k=0;k<deviceInput[i].time.length;k++)\n        dataToBePlotted.push({device:deviceInput[i].deviceName,time:deviceInput[i].time[k],temp:deviceInput[i].temp[k]});\n    \n    var lineGraph1 = svg.append(\"g\").append(\"path\")\n                        .attr(\"class\",\"graph\")\n                        .attr(\"d\", lineFunction(dataToBePlotted))\n                        .attr(\"fill\",\"none\")\n                        .style(\"stroke\", color(deviceInput[i].deviceName));\n//      .datum(function(d) { return {id: d.id, value: d.values[d.values.length - 1]}; })    \n      svg.append(\"g\").append(\"text\")\n      .attr(\"transform\", \"translate(\" + xScale(dataToBePlotted[dataToBePlotted.length-1].time) + \",\" + yScale(dataToBePlotted[dataToBePlotted.length-1].temp) + \")\")\n      .attr(\"x\", 3)\n      .attr(\"dy\", 1)\n      .style(\"font\", \"10px sans-serif\")\n      .text(deviceInput[i].deviceName);\n/*                        .attr(\"stroke\", \"black\")\n                        .attr(\"stroke-width\", 2)\n\t\t\t\t\t    .attr(\"stroke-dasharray\",2)\n\t\t\t\t\t    .attr(\"fill\", color);*/\n}\n    \t/*\t\t\t \n    var lineGraph2 = svg.append(\"g\").append(\"path\")\n                        .attr(\"class\",\"graph\")\n                        .attr(\"d\", lineFunction(deviceInput[1]))\n                        .attr(\"stroke\", \"red\")\n                        .attr(\"stroke-width\", 2)\n\t\t\t\t\t    .attr(\"stroke-dasharray\",2)\n    \t\t\t\t    .attr(\"fill-opacity\",1);*/\n}\n\n// Call the \"Reset DB flow\"\nfunction resetDB(){\n    console.log(\"Start reset db\")\n     var theUrl = \"https://myiotexperiments.eu-gb.mybluemix.net/api/resetDemo\";\n\t var xmlHttp = new XMLHttpRequest();\n\t xmlHttp.open( \"GET\", theUrl, false );\n\t xmlHttp.send( null );\n\t     console.log(\"db has been reset\")\n}\n\n// return TRUE if does exist a device name inside the devicinput vector\nfunction finddeviceName(arr,name){\n    for(var i=0;i<arr.length;i++) \n    {\n        if(arr[i].deviceName==name)return 1;\n    }\n    return 0;\n}\n\n// return the index of a given devicename inside the devicinput vector\nfunction indexdeviceName(arr,name){\n    for(var i=0;i<arr.length;i++) if(arr[i].deviceName==name)return i;\n    return null;\n}\n\n//retrun the [min,max] of the deviceInputa time\nfunction minmaxtime(arr){\n\n    var min = d3.min(arr[0].time);\n    var max = d3.max(arr[0].time);\n    for(var i=1;i<arr.length;i++)\n    {\n        min = (min>d3.min(arr[i].time)) ? (d3.min(arr[i].time)):(min);\n        max = (max<d3.max(arr[i].time)) ? (d3.max(arr[i].time)):(max);\n    }\n\n    return [min,max];\n}\n\n//retrun the [min,max] of the deviceInputa temp\nfunction minmaxtemp(arr){\n\n    var min = d3.min(arr[0].temp);\n    var max = d3.max(arr[0].temp);\n    for(var i=1;i<arr.length;i++)\n    {\n        min = (min>d3.min(arr[i].temp)) ? (d3.min(arr[i].temp)) : (min);\n        max = (max<d3.max(arr[i].temp)) ? (d3.max(arr[i].temp)) : (max);\n    }\n\n    return [min,max];\n}\n\n</script>","x":370,"y":400,"wires":[["b93d0e3d.ebabd8"]]},{"id":"299ac636.602c62","type":"http in","z":"2330cd8.d56d9b2","name":"","url":"/web","method":"get","upload":false,"swaggerDoc":"","x":100,"y":400,"wires":[["f443a3cf.976d78"]]},{"id":"7c34df5c.057e5","type":"http in","z":"2330cd8.d56d9b2","name":"Reset Demo","url":"/api/resetDemo","method":"get","upload":false,"swaggerDoc":"","x":110,"y":560,"wires":[["1e641f38.a18b71"]]},{"id":"1e641f38.a18b71","type":"cloudant in","z":"2330cd8.d56d9b2","name":"Get all docs","cloudant":"","database":"deviceinput","service":"myIoTexperiments-cloudantNoSQLDB","search":"_all_","design":"","index":"","x":291.3333511352539,"y":560.4444093704224,"wires":[["f26d7ce8.d9798"]]},{"id":"f26d7ce8.d9798","type":"function","z":"2330cd8.d56d9b2","name":"bulk delete function","func":"var count = msg.payload.length;\nvar list = [];\nfor (i=0;i<count;i++) {\nlist.push({\n        _id: msg.payload[i]._id,\n        _rev: msg.payload[i]._rev,\n        _deleted: true\n    });\n}\n\nif (i == 0) {\nmsg.payload = \"No documents were found.  The database is empty!\";\nreturn [null, msg];\n}\n\nmsg.payload = {\n                \"docs\": \n                list\n               }\nreturn msg;","outputs":"2","noerr":0,"x":488.6667251586914,"y":560.6666078567505,"wires":[["6e33e907.e5622"],["e57fa1eb.47c258"]]},{"id":"6e33e907.e5622","type":"http request","z":"2330cd8.d56d9b2","name":"deleteDocs","method":"POST","ret":"obj","url":"https://6d9802c1-eac1-47fe-8d15-b07444096d03-bluemix:06b5b4446682207de94ec3cd301fcc283bd361ef16691dd374af7a3f2b38f84f@6d9802c1-eac1-47fe-8d15-b07444096d03-bluemix.cloudant.com/deviceinput/_bulk_docs","tls":"","x":770,"y":520,"wires":[["e57fa1eb.47c258"]]},{"id":"e57fa1eb.47c258","type":"http response","z":"2330cd8.d56d9b2","name":"Response","statusCode":"","headers":{},"x":790,"y":600,"wires":[]},{"id":"cc04367f.ba9258","type":"comment","z":"2330cd8.d56d9b2","name":"Reset DB flow","info":"Delete all docs contained in the cloudant DB","x":98.5,"y":491,"wires":[]},{"id":"2e162013.e6eec8","type":"comment","z":"2330cd8.d56d9b2","name":"Manage device input flow","info":"Set up devices\nFormat input\nWrite data in the cloudant db","x":130,"y":20,"wires":[]},{"id":"2f012215.d9c416","type":"comment","z":"2330cd8.d56d9b2","name":"Compute on data","info":"Read data from cloudant db and make your computations","x":100,"y":260,"wires":[]},{"id":"bfd41d32.123b68","type":"ibmiot in","z":"2330cd8.d56d9b2","authentication":"quickstart","apiKey":"","inputType":"evt","deviceId":"15423e3a3669","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"Device_3","service":"quickstart","allDevices":false,"allApplications":false,"allDeviceTypes":true,"allEvents":true,"allCommands":false,"allFormats":false,"x":120,"y":120,"wires":[["17796061.feb5e8"]]},{"id":"17796061.feb5e8","type":"function","z":"2330cd8.d56d9b2","name":"format input","func":"var time = new Date();\nvar hour = time.getUTCHours();\nvar minute = time.getUTCMinutes();\nvar second = time.getUTCSeconds();\n\n// Create MQTT message in JSON\nmsg = {\n  payload: \n    {\n      d:{\n        \"temp\" : msg.payload.d.temp,\n        \"deviceId\" : msg.payload.d.name,\n        \"deviceName\" : \"Device_3\",\n        \"time\" : hour*60*60+minute*60+second\n      }\n    }\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":120,"wires":[["e2f6cf33.256f1"]]},{"id":"15da2fee.be8fc8","type":"e-mail","z":"2330cd8.d56d9b2","server":"smtp.gmail.com","port":"465","secure":true,"name":"bortolossi.andrea89@gmail.com","dname":"Andrea mail","x":530,"y":740,"wires":[]},{"id":"b83bd15d.6f4ed8","type":"http in","z":"2330cd8.d56d9b2","name":"","url":"/alert","method":"get","upload":false,"swaggerDoc":"","x":80,"y":740,"wires":[["8bd68d3e.2c36c"]]},{"id":"8bd68d3e.2c36c","type":"function","z":"2330cd8.d56d9b2","name":"format input","func":"msg.topic = \"WARNING TEMPERATURE\";\nmsg.payload = \"WARNING: temperature is over the limit!\"\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":740,"wires":[["15da2fee.be8fc8"]]},{"id":"44633638.757a18","type":"e-mail in","z":"2330cd8.d56d9b2","name":"","protocol":"IMAP","server":"imap.gmail.com","useSSL":true,"port":"993","box":"INBOX","disposition":"Read","repeat":"30","x":70,"y":780,"wires":[[]]},{"id":"c87dbfa2.3ebd68","type":"comment","z":"2330cd8.d56d9b2","name":"Send alert to mail","info":"","x":100,"y":660,"wires":[]}]
